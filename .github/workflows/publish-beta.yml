# Whenever a change is merged into master branch,
# it is pushed into a corresponding release branch
# like, releases/1.0, releases/1.1, etc. This would
# trigger a beta release by incrementing the patch
# version. A PR is either created or updated which
# when merge would then initiate a Staging Release 
# Workflow.
name: Beta Release Workflow

on:
  push:
    branches:
      - 'releases/**'

jobs:
  publish-beta-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          git config user.name bhoos-devops
          git config user.email devops@bhoos.com
      
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@bhoos'
      
      # Install packages with PERSONAL_ACCESS_TOKEN since it might
      # need access to other repos as well
      - name: Install Packages
        run: yarn
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      
      # Publish with GITHUB_TOKEN, since this also requires pushing
      # to the repository and we don't want to trigger another
      # action run, which happens when PERSONAL_ACCESS_TOKEN is used
      - name: Publish Beta
        run: |
          yarn build
          yarn version --patch
          yarn publish --tag beta
          git push
          version=$(node -p "require('./package.json').version")
          echo "VERSION=$version" >> $GITHUB_ENV
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Branch name
        run: |
          ref=${{github.ref}}
          echo "RELEASE_BRANCH=${ref#refs/heads/}" >> $GITHUB_ENV

      - name: Create or Update PR to promote beta to staging
        run: |
          prs=$(gh api "/repos/:owner/:repo/pulls?base=master&head=${{github.repository_owner}}:${{env.RELEASE_BRANCH}}")
          prnum=$(node -p "r=${prs}; r[0] ? r[0].number : ''")
          if [ -z $prnum ]
          then
            echo "PR request doesn't exist. Creating a new one";
            gh pr create --title "Promote Beta Version ${{env.VERSION}} to Staging" --base master --body "Merge this PR to publish the beta version of this package to staging."
          else
            echo "PR $prnum already exists. Update the PR label and title"
            gh api "/repos/:owner/:repo/pulls/${prnum}" -X PATCH  -F title="Promote Beta Version ${{env.VERSION}} to Staging"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
