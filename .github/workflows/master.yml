# When any change is pushed on master, it is merged into
# a corresponding release branch (Ex: releases/1.0) which
# triggers a beta version release with @beta tag
#
# When a release itself is merged into master, then the
# beta version is promoted to staging and available with
# @next tag. At the same time a Github Release is created
# with 'prerelease' flag which could be released to
# promote the staging version to latest production.
name: Process master branch updates

on:
  push:
    branches:
      - master

jobs:
  prepare-master:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2 # required to perform a HEAD^1 query
      - run: |
          git config user.name bhoos-devops
          git config user.email devops@bhoos.com

      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@bhoos'

      - name: Generate version information
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_COMMITS: ${{ toJSON(github.event.commits) }}
        run: |
          # Get the major and minor version part only
          version=$(node -p "require('./package.json').version.split('.').slice(0, 2).join('.')")
          # Use release branch of format `releases/X.X`
          releaseBranch=releases/${version}
          remoteBranch=$(git ls-remote origin ${releaseBranch})
          echo "VERSION=${version}" >> $GITHUB_ENV
          echo "RELEASE_BRANCH=${releaseBranch}" >> $GITHUB_ENV
          echo "REMOTE_BRANCH=${remoteBranch}" >> $GITHUB_ENV
          
      - name: Create Release Branch ${{ env.RELEASE_BRANCH }} from master
        if: contains(env.REMOTE_BRANCH, env.RELEASE_BRANCH) != true
        run: |
          gh api repos/:owner/:repo/git/refs -F ref="refs/heads/${RELEASE_BRANCH}" -F sha="${{github.sha}}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Detect Staging Release
        env:
          GITHUB_COMMITS: ${{ toJSON(github.event.commits) }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          releaseInfo=$(gh api /repos/:owner/:repo/git/ref/heads/${{ env.RELEASE_BRANCH }})
          releaseSha=$(node -p "k=${releaseInfo}; k.object.sha")
          # The master branch has the release commit on the pen ulitimate position when the branch is being merged from release
          code="c=$GITHUB_COMMITS; k=c && c[c.length-2]; k && k.id"
          masterSha=$(node -p "$code")
          if [ "$releaseSha" = "$masterSha" ]; then staging="YES"; else staging="NO"; fi
          echo "STAGING=${staging}" >> $GITHUB_ENV

      # Push the changes to release branch using PERSONAL ACCESS TOKEN
      # since we want the github action to be triggered
      - name: Push changes to release branch
        if: env.STAGING == 'NO'
        run: |
          gh api repos/:owner/:repo/merges -F base="${{ env.RELEASE_BRANCH }}" -F head="${{github.sha}}"
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Promote to Staging
        if: env.STAGING == 'YES'
        run: |
          echo "PR request merged for staging"
          pkg=$(node -p "require('./package.json').name")
          version=$(node -p "require('./package.json').version")
          echo "RELEASE_VERSION=${version}" >> $GITHUB_ENV
          npm dist-tag add ${pkg}@${version} next
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Create Prerelease for moving to production
        if: env.STAGING == 'YES'
        uses: actions/create-release@v1
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: Release ${{ env.RELEASE_VERSION }}
          commitish: ${{ github.sha }}
          draft: false
          prerelease: true
