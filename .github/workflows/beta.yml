name: Beta Release Workflow

on:
  push:
    branches:
      - master

jobs:
  beta-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          git config user.name bhoos-devops
          git config user.email devops@bhoos.com

      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@bhoos'

      # Install packages with PERSONAL_ACCESS_TOKEN since it might
      # need access to other repos
      - name: Install Packages
        run: yarn
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      # Publish with GITHUB_TOKEN, since this also requies pushing
      # to the repository and we don't want to trigger another
      # action run, which happens when PERSONAL_ACCESS_TOKEN is used
      - name: Publish Beta
        run: |
          yarn build
          yarn version --prerelease --preid beta
          yarn publish --tag beta
          git push

          # The beta version would have been set by now
          fullVersion=$(git describe --tags)
          releaseVersion=${fullVersion:0:${#fullVersion}-7}
          releaseBranch=releases/${releaseVersion}
          remoteBranch=$(git ls-remote origin ${releaseBranch})
          echo "RELEASE_VERSION=${releaseVersion}" >> $GITHUB_ENV
          echo "RELEASE_BRANCH=${releaseBranch}" >> $GITHUB_ENV
          echo "REMOTE_BRANCH=${remoteBranch}" >> $GITHUB_ENV
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release Branch and Generate PR
        if: contains(env.REMOTE_BRANCH, env.RELEASE_BRANCH) != true
        run: |
          # Create a remote release branch
          gh api repos/:owner/:repo/git/refs -F ref="refs/heads/${RELEASE_BRANCH}" -F sha="${{ github.sha }}"
          # Create a PR from master branch
          gh pr create --title "Release ${RELEASE_VERSION}" --body "Automatic PR used to create a prerelease from beta. Once the release is ready for staging, fix merge conflicts on package.json by accepting the incoming changes. A prerelease is published with **next** tag generated when this PR is merged. To move the release into production, Use the github release manager and publish the release unchecking the prerelease flag." --base ${RELEASE_BRANCH}

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

